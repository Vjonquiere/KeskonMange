name: Server Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  backend-build:
    name: Backend build
    runs-on: ubuntu-latest
    environment: test
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./server/package-lock.json
    - name: Install dependencies
      run: npm ci
      working-directory: './server'
    - name: Build the project (if a build script exists)
      run: npm run build --if-present
      working-directory: './server'

  backend-test:
    name: Backend test
    needs: backend-build
    runs-on: ubuntu-latest
    environment: test
    env:
        DATABASE_HOST: ${{ vars.DATABASE_HOST }}
        DATABASE_USER: ${{ vars.DATABASE_USER }}
        DATABASE_NAME: ${{ vars.DATABASE_NAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        SMTP_ADDRESS : ${{ vars.SMTP_ADDRESS }}
        SMTP_HOST : ${{ secrets.SMTP_HOST }}
        SMTP_PASSWORD : ${{ secrets.SMTP_PASSWORD }}
        POP3_ADDRESS : ${{ vars.POP3_ADDRESS }}
        POP3_HOST : ${{ secrets.POP3_HOST }}
        POP3_PASSWORD : ${{ secrets.POP3_PASSWORD }}

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./server/package-lock.json
    - name: Install redis
      run: sudo apt install redis
    - name: Install dependencies
      run: npm ci
      working-directory: './server'
    - name: Create resources directories
      run: mkdir public/images; mkdir public/images/recipe; mkdir public/steps
      working-directory: './server'
    - name: Add HTTPS certificate
      run: echo "${{ secrets.SSL_CERTIFICATE }}" | base64 --decode > ssl-cert/certificate.pem;
          echo "${{ secrets.SSL_PRIVATE_KEY }}" | base64 --decode > ssl-cert/private-key.pem
      working-directory: './server'
    - name: Run Tests
      run: env TZ='Europe/Paris' npm test
      working-directory: './server'
    - name: Archive Coverage Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-artifacts
        path: ./server/coverage
      

  backend-coverage:
    name: Backend coverage
    needs: backend-test
    runs-on: ubuntu-latest
    environment: test

    steps:
    - name: Restore Coverage Artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-artifacts
        path: ./server/coverage
    - name: Debug Coverage Directory
      run: ls -l ./server/coverage
    - name: Install w3m
      run: sudo apt install w3m -y
    - name: Process Global Coverage
      run: w3m -dump coverage/lcov-report/index.html
      working-directory: './server'
    - name: Process Modules Coverage
      run: w3m -dump coverage/lcov-report/server/module/index.html
      working-directory: './server'
    - name: Process Routers Coverage
      run: w3m -dump coverage/lcov-report/server/routers/index.html
      working-directory: './server'

  client-format:
    name: Check Flutter format
    runs-on: ubuntu-latest
    environment: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: "3.24.5"
    - name: Check format
      run: dart format . --set-exit-if-changed
      working-directory: './client'
  
  client-build:
    needs: [client-format, backend-test]
    name: Build Flutter App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.5"

      - name: Install dependencies
        run: flutter pub get
        working-directory: './client'

  client-test:
    name: Test Flutter App
    runs-on: ubuntu-latest
    needs: client-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.5"

      - name: Install dependencies
        run: flutter pub get
        working-directory: './client'

      - name: Run unit tests
        run: flutter test
        working-directory: './client'