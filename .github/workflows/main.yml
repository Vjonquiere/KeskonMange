name: Server Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: test
    env:
        DATABASE_HOST: ${{ vars.DATABASE_HOST }}
        DATABASE_USER: ${{ vars.DATABASE_USER }}
        DATABASE_NAME: ${{ vars.DATABASE_NAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        SMTP_ADDRESS : ${{ vars.SMTP_ADDRESS }}
        SMTP_HOST : ${{ secrets.SMTP_HOST }}
        SMTP_PASSWORD : ${{ secrets.SMTP_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ./server/package-lock.json
      - name: SetUp Done
        run: echo setup done
        working-directory: './server'

  build:
    runs-on: ubuntu-latest
    environment: test
    needs: setup
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./server/package-lock.json
    - name: Install dependencies
      run: npm ci
      working-directory: './server'
    - name: Build the project (if a build script exists)
      run: npm run build --if-present
      working-directory: './server'

  test:
    needs: build
    runs-on: ubuntu-latest
    environment: test
    env:
        DATABASE_HOST: ${{ vars.DATABASE_HOST }}
        DATABASE_USER: ${{ vars.DATABASE_USER }}
        DATABASE_NAME: ${{ vars.DATABASE_NAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        SMTP_ADDRESS : ${{ vars.SMTP_ADDRESS }}
        SMTP_HOST : ${{ secrets.SMTP_HOST }}
        SMTP_PASSWORD : ${{ secrets.SMTP_PASSWORD }}

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./server/package-lock.json
    - name: Install dependencies
      run: npm ci
      working-directory: './server'
    - name: Run Tests
      run: env TZ='Europe/Paris' npm test
      working-directory: './server'

  coverage:
    needs: test
    runs-on: ubuntu-latest
    environment: test
    env:
        DATABASE_HOST: ${{ vars.DATABASE_HOST }}
        DATABASE_USER: ${{ vars.DATABASE_USER }}
        DATABASE_NAME: ${{ vars.DATABASE_NAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        SMTP_ADDRESS : ${{ vars.SMTP_ADDRESS }}
        SMTP_HOST : ${{ secrets.SMTP_HOST }}
        SMTP_PASSWORD : ${{ secrets.SMTP_PASSWORD }}

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./server/package-lock.json
    - name: Collect Coverage
      run: npm run test:coverage
      working-directory: './server'
